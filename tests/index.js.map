{"version":3,"sources":["../src/tests/index.js"],"names":["require","install","generateFunicular","memory","funicular","Carriage","unmountError","oldChild","mountError","newChild","data","childRemount","remount","callback","childs","child","next","mountChild","error","Error","unmount","describe","it","done","a","mount","ifError","equal","id","stage","deepProperty","namedCarriages","olda","newa","notEqual","notDeepProperty","b","undefined","root","unnamedCarriages"],"mappings":"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","file":"index.js","sourcesContent":["require('source-map-support').install();\n\nimport { assert } from 'chai';\nimport Funicular, { Carriage } from '../lib';\nimport { ObjectGraph } from 'ancient-graph';\nimport async from 'async';\nimport each from 'async/each';\n\nvar generateFunicular = (memory) => {\n  var funicular = new Funicular();\n  funicular.Carriage = class extends funicular.Carriage {\n    childDidRemount(unmountError, oldChild, mountError, newChild) {\n      if (this.data.childRemount) {\n        this.remount();\n      }\n    }\n    enable(callback) {\n      if (this.data.childs) {\n        each(this.data.childs, (child, next) => {\n          this.mountChild(child, memory[child], (error) => {\n            next(error); \n          });\n        }, (error) => {\n          if (error) {\n            this.error = new Error('Broken child.');\n            each(this.childs, (child, next) => {\n              child.unmount();\n            }, () => {\n              callback();\n            });\n          } else {\n            // Useful work.\n            callback();   \n          }\n        });\n      } else callback();\n    }\n  }\n  return funicular;\n}\n\ndescribe('AncientSouls/Funicular', () => {\n  it('mount remount unmount', (done) => {\n    var memory = {\n      a: { },\n    };\n    \n    var funicular = generateFunicular(memory);\n    \n    funicular.mount('a', memory.a,\n      (error, a) => {\n        assert.ifError(error);\n        \n        assert.equal(a.id, 1);\n        \n        assert.equal(a.stage, 'mounted');\n        \n        assert.deepProperty(funicular.namedCarriages, `a.1`);\n        \n        a.remount();\n      },\n      (unmountError, olda, mountError, newa) => {\n        assert.notEqual(olda, newa);\n        \n        assert.equal(olda.id, 1);\n        assert.equal(newa.id, 2);\n        \n        assert.equal(olda.stage, 'unmounted');\n        assert.equal(newa.stage, 'mounted');\n        \n        assert.ifError(unmountError);\n        assert.ifError(mountError);\n        \n        assert.notDeepProperty(funicular.namedCarriages, `a.1`);\n        assert.deepProperty(funicular.namedCarriages, `a.2`);\n        \n        newa.unmount();\n      },\n      (error, a) => {\n        assert.ifError(error);\n        \n        assert.equal(a.id, 2);\n        \n        assert.equal(a.stage, 'unmounted');\n        \n        assert.notDeepProperty(funicular.namedCarriages, `a.2`);\n        \n        done()\n      }\n    );\n  });\n  it('one parent with child', (done) => {\n    var memory = {\n      a: {  childs: ['b'] },\n      b: { },\n    };\n    \n    var funicular = generateFunicular(memory);\n    \n    funicular.mount('a', memory.a,\n      (error, a) => {\n        assert.ifError(error);\n        \n        assert.equal(a.id, 1);\n        assert.equal(a.childs.b.id, 2);\n        \n        assert.equal(a.stage, 'mounted');\n        assert.equal(a.childs.b.stage, 'mounted');\n        \n        assert.deepProperty(funicular.namedCarriages, `a.1`);\n        assert.deepProperty(funicular.namedCarriages, `b.2`);\n        \n        a.remount();\n      },\n      (unmountError, olda, mountError, newa) => {\n        assert.ifError(unmountError);\n        assert.ifError(mountError);\n          \n        assert.notDeepProperty(olda, `.childs.b`);\n        \n        assert.equal(olda.id, 1);\n        assert.equal(newa.id, 3);\n        assert.equal(newa.childs.b.id, 2);\n        \n        assert.equal(olda.stage, 'unmounted');\n        assert.equal(newa.stage, 'mounted');\n        assert.equal(newa.childs.b.stage, 'mounted');\n        \n        assert.notDeepProperty(funicular.namedCarriages, `a.1`);\n        assert.deepProperty(funicular.namedCarriages, `a.3`);\n        assert.deepProperty(funicular.namedCarriages, `b.2`);\n        \n        newa.unmount();\n      },\n      (error, a) => {\n        assert.ifError(error);\n        \n        assert.equal(a.id, 3);\n        \n        assert.equal(a.stage, 'unmounted');\n        \n        assert.notDeepProperty(funicular.namedCarriages, `b.2`);\n        assert.notDeepProperty(funicular.namedCarriages, `a.3`);\n        \n        done();\n      }\n    );\n  });\n  it('one with parent and unnamed parent', (done) => {\n    var memory = {\n      a: {  childs: ['b'] },\n      b: { },\n    };\n    \n    var funicular = generateFunicular(memory);\n    \n    funicular.mount(undefined, { childs: ['b'] }, (error, root) => {\n      assert.ifError(error);\n      \n      assert.equal(root.id, 1);\n      assert.equal(root.childs.b.id, 2);\n        \n      assert.equal(root.stage, 'mounted');\n      assert.equal(root.childs.b.stage, 'mounted');\n      \n      assert.deepProperty(funicular.unnamedCarriages, `1`);\n      assert.deepProperty(funicular.namedCarriages, `b.2`);\n      assert.deepProperty(funicular.namedCarriages, `b.0`);\n      \n      funicular.mount('a', memory.a,\n        (error, a) => {\n          assert.ifError(error);\n          \n          assert.equal(a.id, 3);\n          assert.equal(a.childs.b.id, 2);\n          \n          assert.equal(a.stage, 'mounted');\n          assert.equal(a.childs.b.stage, 'mounted');\n          \n          assert.deepProperty(funicular.namedCarriages, `a.3`);\n          assert.deepProperty(funicular.namedCarriages, `b.2`);\n          \n          a.remount();\n        },\n        (unmountError, olda, mountError, newa) => {\n          assert.ifError(unmountError);\n          assert.ifError(mountError);\n          \n          assert.notDeepProperty(olda, `.childs.b`);\n          \n          assert.equal(olda.id, 3);\n          assert.equal(newa.id, 4);\n          assert.equal(newa.childs.b.id, 2);\n          \n          assert.equal(olda.stage, 'unmounted');\n          assert.equal(newa.stage, 'mounted');\n          assert.equal(newa.childs.b.stage, 'mounted');\n          \n          assert.notDeepProperty(funicular.namedCarriages, `a.3`);\n          assert.deepProperty(funicular.namedCarriages, `a.4`);\n          assert.deepProperty(funicular.namedCarriages, `b.2`);\n          \n          newa.unmount();\n        },\n        (error, a) => {\n          assert.ifError(error);\n          \n          assert.equal(a.id, 4);\n          \n          assert.equal(a.stage, 'unmounted');\n          \n          assert.notDeepProperty(funicular.namedCarriages, `a.3`);\n          assert.deepProperty(funicular.namedCarriages, `b.2`);\n          \n          root.unmount();\n        }\n      );\n    }, null, (error, root) => {\n      assert.ifError(error);\n      \n      assert.equal(root.id, 1);\n      \n      assert.equal(root.stage, 'unmounted');\n      \n      assert.notDeepProperty(funicular.unnamedCarriages, `1`);\n      assert.notDeepProperty(funicular.namedCarriages, `b.2`);\n      \n      done();\n    });\n  });\n  it('childs remount and unmount handlers', (done) => {\n    var memory = {\n      a: {  childs: ['b'], childRemount: true },\n      b: { },\n    };\n    \n    var funicular = generateFunicular(memory);\n    \n    funicular.mount(undefined, { childs: ['b'] }, (error, root) => {\n      funicular.mount('a', memory.a,\n        (error, a) => {\n          assert.ifError(error);\n          a.childs.b.remount();\n        },\n        (unmountError, olda, mountError, newa) => {\n          assert.ifError(unmountError);\n          assert.ifError(mountError);\n          \n          assert.notDeepProperty(olda, `.childs.b`);\n          \n          assert.equal(olda.id, 3);\n          assert.equal(newa.id, 5);\n          assert.equal(newa.childs.b.id, 4);\n          \n          assert.equal(olda.stage, 'unmounted');\n          assert.equal(newa.stage, 'mounted');\n          assert.equal(newa.childs.b.stage, 'mounted');\n          \n          assert.notDeepProperty(funicular.namedCarriages, `a.3`);\n          assert.notDeepProperty(funicular.namedCarriages, `b.2`);\n          assert.deepProperty(funicular.namedCarriages, `a.5`);\n          assert.deepProperty(funicular.namedCarriages, `b.4`);\n          \n          root.unmount();\n        },\n        (error, a) => {\n          assert.ifError(error);\n          \n          assert.equal(a.id, 5);\n          \n          assert.equal(a.stage, 'unmounted');\n          \n          assert.notDeepProperty(funicular.namedCarriages, `a.5`);\n          assert.notDeepProperty(funicular.namedCarriages, `b.4`);\n          \n          done();\n        }\n      );\n    }, () => {\n      throw new Error('this is wrong');\n    }, (error, root) => {\n      assert.ifError(error);\n      \n      assert.equal(root.id, 1);\n      \n      assert.equal(root.stage, 'unmounted');\n      \n      assert.notDeepProperty(funicular.unnamedCarriages, `1`);\n      \n      assert.deepProperty(funicular.namedCarriages, `a.5`);\n      assert.deepProperty(funicular.namedCarriages, `b.4`);\n      \n      funicular.namedCarriages.a[5].unmount();\n    });\n  });\n});"]}