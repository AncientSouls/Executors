{"version":3,"sources":["../src/tests/index.js"],"names":["require","install","log","deep","item","replaced","repeat","name","index","isMounted","isUnmounted","isReplaced","map","childs","c","parents","getActive","CustomItem","result","setTimeout","query","data","find","manager","_memory","prepareChild","undefined","prepared","replace","Error","_timeoutOfPreparation","child","next","mount","mounted","_timeoutOfMounting","_timeoutOfUnmounting","localName","oldChild","newChild","error","unmount","generateManager","memory","timeoutOfPreparation","timeoutOfMounting","timeoutOfUnmounting","describe","it","a","a1","get","equal","_items","a2","done","isPrepared","prepare","a3","x","d","b","notEqual","root1","z","root2","lengthOf","Object","keys","root3","b1","b2","b3","y","root0","c1","getResult"],"mappings":"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","file":"index.js","sourcesContent":["require('source-map-support').install();\n\nimport { assert } from 'chai';\nimport { Manager, Item } from '../lib';\nimport { ObjectGraph } from 'ancient-graph';\nimport async from 'async';\nimport each from 'async/each';\nimport lodash from 'lodash';\nimport colors from 'colors';\n\nfunction log(deep, item, replaced = false) {\n  console.log(\n    ...lodash.repeat(!replaced?'-':' ', deep),\n    item.name || 'unnamed', `(${item.index})`,\n    colors[item.isMounted?'bold':'gray']('isMounted'),\n    colors[item.isUnmounted?'bold':'gray']('isUnmounted'),\n    colors[item.isReplaced?'bold':'gray']('isReplaced'),\n    '[', lodash.map(item.childs, (c) => `${c.name} (${c.index})`), ']',\n    '[', lodash.map(item.parents, (c) => `(${c.index})`), ']'\n  );\n  if (item.isReplaced) {\n    log(deep, item.getActive(), true);\n  }\n}\n\n/**\n * @description\n * Example of Item extension.\n * Support for two query types:\n * * As function `lodash.find` selector for memory.\n * * As object with childs queries by local names.\n */\nclass CustomItem extends Item {\n  // With this example, access to result provide method getResult.\n  getResult() {\n    return this.result;\n  }\n  preparation() {\n    // With this examples, i use field exports for executed data.\n    this.result = {};\n    setTimeout(() => {\n      if (typeof(this.query) == 'function') { // is single named item (currect or incorrect without name)\n        this.data = lodash.find(this.manager._memory, this.query);\n        if (this.data) { // if data founded\n          if (this.name) { // if global name sended, it currect item\n            for (var c in this.data.childs) {\n              this.prepareChild(c, undefined, this.data.childs[c]);\n            }\n            this.result = this.data;\n            this.prepared(undefined); // done prepare\n          } else { // incorrect item without name\n            this.replace(this.data.name, this.query, this.data); // reprepare new item with name and equal query and already existed data\n          }\n        } else { // if data not founded\n          this.prepared('data-not-founded');\n        }\n      } else if (typeof(this.query) == 'object') { // is unnamed item for get childs named items\n        // if this query used for named item, it... on your conscience\n        for (var c in this.query) {\n          this.prepareChild(c, undefined, this.query[c]);\n        }\n        this.result = this.childs;\n        this.prepared(undefined); // done prepare\n      } else {\n        throw new Error('wrong query type');\n      }\n    }, this.manager._timeoutOfPreparation);\n  }\n  mounting() {\n    setTimeout(() => {\n      each(this.childs, (child, next) => {\n        child.mount(() => {\n          next();\n        });\n      }, () => this.mounted(undefined));\n    }, this.manager._timeoutOfMounting);\n  }\n  unmounting() {\n    setTimeout(() => {\n      super.unmounting();\n    }, this.manager._timeoutOfUnmounting);\n  }\n  childReplaced(localName, oldChild, newChild) {\n    this.replace(this.name, this.query, this.data).mount((error, item) => {\n      this.unmount();\n    });\n  }\n}\n\nfunction generateManager(memory, timeoutOfPreparation = 0, timeoutOfMounting = 0, timeoutOfUnmounting = 0) {\n  var manager = new Manager(CustomItem);\n  manager._memory = memory;\n  manager._timeoutOfPreparation = timeoutOfPreparation;\n  manager._timeoutOfMounting = timeoutOfMounting;\n  manager._timeoutOfUnmounting = timeoutOfUnmounting;\n  return manager;\n};\n\ndescribe('AncientSouls/Funicular', () => {\n  describe('check methods', () => {\n    describe('manager.get', () => {\n      it('should return constructed item and register global item if name exists', () => {\n        var memory = {\n          a: { name: 'a' },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,0);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        \n        assert.equal(a1, manager._items.a);\n        assert.equal(a1.name, 'a');\n        \n        var a2 = manager.get('a', (data) => data.name == 'a');\n        \n        assert.equal(a1, a2);\n      });\n    });\n    describe('item.prepare', () => {\n      it('should run preparation for item or add once listener for prepared event', (done) => {\n        var memory = {\n          a: { name: 'a' },\n        };\n        \n        var manager = generateManager(memory, 5, 0 ,0);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        \n        assert.equal(a1.isPrepared, undefined);\n        \n        a1.prepare((error, a2) => {\n          assert.equal(a1, a2);\n          assert.equal(a2.isPrepared, true);\n        \n          a2.prepare((error, a3) => {\n            assert.equal(a2, a3);\n            assert.equal(a3.isPrepared, true);\n            done();\n          });\n        });\n        \n        assert.equal(a1.isPrepared, false);\n      });\n    });\n    describe('item.prepareChild', () => {\n      it('should return item, and after parent fully, run preparation for all childs called with prepareChild', (done) => {\n        var memory = {\n          a: { name: 'a', childs: { x: (d) => d.name == 'b' } },\n          b: { name: 'b' },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,0);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        \n        assert.equal(a1.isPrepared, undefined);\n        \n        a1.prepare((error, a2) => {\n          assert.equal(a1, a2);\n          assert.equal(a2.isPrepared, true);\n          \n          assert.equal(a1, manager._items.a);\n          assert.equal(a1.childs.x, manager._items.b);\n          \n          assert.equal(a1.childs.x.isPrepared, true);\n          \n          done();\n        });\n      });\n    });\n    describe('item.mount', () => {\n      it('should prepare if not prepared, run mounting for item or add once listener for mounted event', (done) => {\n        var memory = {\n          a: { name: 'a', childs: { x: (d) => d.name == 'b' } },\n          b: { name: 'b' },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,0);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        \n        assert.equal(a1.isPrepared, undefined);\n        assert.equal(a1.isMounted, undefined);\n        \n        a1.mount((error, a2) => {\n          assert.equal(a1, a2);\n          \n          assert.equal(a2.isPrepared, true);\n          assert.equal(a2.isMounted, true);\n          \n          assert.equal(a1, manager._items.a);\n          assert.equal(a1.childs.x, manager._items.b);\n          \n          assert.equal(a1.childs.x.isPrepared, true);\n          assert.equal(a1.childs.x.isMounted, true);\n          \n          done();\n        });\n      });\n    });\n    describe('item.unmount', () => {\n      it('should unmount childs', (done) => {\n        var memory = {\n          a: { name: 'a', childs: { x: (d) => d.name == 'b' } },\n          b: { name: 'b' },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,5);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        \n        assert.equal(a1.isPrepared, undefined);\n        assert.equal(a1.isMounted, undefined);\n        \n        a1.mount((error, a2) => {\n          a2.unmount((error, a3) => {\n            assert.equal(a1, a3);\n            \n            assert.equal(a3.isPrepared, true);\n            assert.equal(a3.isMounted, true);\n            assert.equal(a3.isUnmounted, true);\n            \n            assert.equal(a1, manager._items.a);\n            assert.equal(a1.childs.x, manager._items.b);\n            \n            assert.equal(a1.childs.x.isPrepared, true);\n            assert.equal(a1.childs.x.isMounted, true);\n            assert.notEqual(a1.childs.x.isUnmounted, true);\n            \n            setTimeout(() => {\n              assert.equal(a1.childs.x.isUnmounted, true);\n            \n              done();\n            }, 10);\n          });\n        });\n      });\n      it('should unmount unnamed items', (done) => {\n        var memory = {\n          a: { name: 'a', childs: { x: (d) => d.name == 'b' } },\n          b: { name: 'b' },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,0);\n        \n        var root1 = manager.get(undefined, { z: (data) => data.name == 'a' });\n        \n        assert.equal(root1.isPrepared, undefined);\n        assert.equal(root1.isMounted, undefined);\n        \n        root1.mount((error, root2) => {\n          assert.equal(root1, root2);\n          \n          assert.equal(root2.isPrepared, true);\n          assert.equal(root2.isMounted, true);\n          \n          assert.equal(root2.childs.z, manager._items.a);\n          assert.equal(root2.childs.z.childs.x, manager._items.b);\n          \n          assert.equal(root2.childs.z.isPrepared, true);\n          assert.equal(root2.childs.z.isMounted, true);\n          assert.equal(root2.childs.z.childs.x.isPrepared, true);\n          assert.equal(root2.childs.z.childs.x.isMounted, true);\n          assert.equal(root2.childs.z.childs.x, manager._items.b);\n          \n          assert.lengthOf(Object.keys(manager._items), 2);\n          \n          root2.unmount((error, root3) => {\n            assert.equal(root1, root3);\n            \n            setTimeout(() => {\n              assert.equal(root2.isUnmounted, true);\n              assert.equal(root2.childs.z.isUnmounted, true);\n              assert.equal(root2.childs.z.childs.x.isUnmounted, true);\n              \n              done();\n            }, 10);\n          });\n        });\n      });\n      it('should unmount items only if all parents are unmounted', (done) => {\n        var memory = {\n          a: { name: 'a', childs: { x: (d) => d.name == 'c' } },\n          b: { name: 'b', childs: { x: (d) => d.name == 'c' } },\n          c: { name: 'c' },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,0);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        \n        var b1 = manager.get('b', (data) => data.name == 'b');\n        \n        a1.mount((error, a2) => {\n          b1.mount((error, b2) => {\n            a2.unmount((error, a3) => {\n              setTimeout(() => {\n                assert.equal(a1.isUnmounted, true);\n                assert.notEqual(b1.isUnmounted, true);\n                assert.notEqual(a1.childs.x.isUnmounted, true);\n                assert.lengthOf(Object.keys(a1.childs.x.parents), 1);\n                \n                b2.unmount((error, b3) => {\n                  assert.notEqual(a1.childs.x.isUnmounted, true);\n                  assert.lengthOf(Object.keys(a1.childs.x.parents), 0);\n                  \n                  done();\n                });\n              }, 10);\n            });\n          });\n        });\n      });\n    });\n    describe('item.replace', () => {\n      it('should replace this item without changes', (done) => {\n        var memory = {\n          a: { name: 'a' },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,0);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        \n        a1.mount((error, a2) => {\n          var a3 = a2.replace();\n          assert.notEqual(a2, a3);\n          assert.equal(a2.isPrepared, true);\n          assert.notEqual(a3.isPrepared, true);\n          assert.notEqual(a3.isMounted, true);\n          \n          done();\n        });\n      });\n      it('should replace this item with already existed other item', (done) => {\n        var memory = {\n          a: { name: 'a' },\n          b: { name: 'b' },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,0);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        var b1 = manager.get('b', (data) => data.name == 'b');\n        \n        a1.mount((error, a2) => {\n          var b2 = a2.replace(b1);\n          assert.notEqual(a2, b2);\n          assert.equal(a2.isPrepared, true);\n          assert.notEqual(b2.isPrepared, true);\n          assert.notEqual(b2.isMounted, true);\n          \n          done();\n        });\n      });\n      it('should replace this item with different name, query and data', (done) => {\n        var memory = {\n          a: { name: 'a' },\n          b: { name: 'b' },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,0);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        var b1 = manager.get('b', (data) => data.name == 'b');\n        \n        a1.mount((error, a2) => {\n          var b2 = a2.replace('b', (d) => d.name == 'b');\n          assert.notEqual(a2, b2);\n          assert.equal(a2.isPrepared, true);\n          assert.notEqual(b2.isPrepared, true);\n          assert.notEqual(b2.isMounted, true);\n          \n          done();\n        });\n      });\n    });\n  });\n  describe('check concepts', () => {\n    it('lifecicle', (done) => {\n      var memory = {\n        a: { name: 'a', childs: {\n          x: (d) => d.name == 'b',\n          y: (d) => d.name == 'c',\n        }, },\n        b: { name: 'b' },\n        c: { name: 'c' },\n      };\n      \n      var manager = generateManager(memory, 0, 0 ,0);\n      \n      var root0 = manager.get(undefined, { a: (d) => d.name == 'a' });\n      \n      root0.mount((error, root1) => {\n        \n        var a1 = root1.childs.a;\n        var b1 = a1.childs.x;\n        var c1 = a1.childs.y;\n        \n        assert.equal(a1, manager._items.a);\n        assert.equal(b1, manager._items.b);\n        assert.equal(c1, manager._items.c);\n        \n        assert.equal(root1.isPrepared, true);\n        assert.equal(a1.isPrepared, true);\n        assert.equal(b1.isPrepared, true);\n        assert.equal(c1.isPrepared, true);\n        \n        assert.equal(root1.isMounted, true);\n        assert.equal(a1.isMounted, true);\n        assert.equal(b1.isMounted, true);\n        assert.equal(c1.isMounted, true);\n        \n        root1.childs.a.replace().mount((error, a) => {\n          setTimeout(() => {\n            \n            var root2 = root1.getActive();\n            \n            assert.equal(root1.isUnmounted, true);\n            assert.equal(root1.isReplaced, true);\n            \n            assert.equal(root2.isMounted, true);\n            assert.notEqual(root2.isUnmounted, true);\n            assert.notEqual(root2.isReplaced, true);\n            \n            var a2 = a1.getActive();\n            \n            assert.equal(a1.isUnmounted, true);\n            assert.equal(a1.isReplaced, true);\n            \n            assert.equal(a2.isMounted, true);\n            assert.notEqual(a2.isUnmounted, true);\n            assert.notEqual(a2.isReplaced, true);\n            \n            assert.notEqual(b1.isReplaced, true);\n            assert.notEqual(c1.isReplaced, true);\n            \n            assert.notEqual(b1.isUnmounted, true);\n            assert.notEqual(c1.isUnmounted, true);\n            \n            root2.unmount(() => {\n              setTimeout(() => {\n                \n                assert.equal(root2.isUnmounted, true);\n                assert.equal(a2.isUnmounted, true);\n                assert.equal(b1.isUnmounted, true);\n                assert.equal(c1.isUnmounted, true);\n                \n                done();\n              }, 10);\n            });\n            \n          }, 10);\n        });\n      });\n    });\n    describe('registrations', () => {\n      it('should soft unregister global item when unmount method just runned, and rewrite new item when it constructed', (done) => {\n        var memory = {\n          a: { name: 'a' },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,5);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        \n        a1.mount((error, a2) => {\n          a2.unmount((error, a3) => {\n            \n            // Old version still in _items, until someone not call manager.get method.\n            assert.equal(manager._items.a, a1);\n            // After that old item unregister from _items and new registered.\n            assert.notEqual(manager.get('a', (data) => data.name == 'a'), a1);\n            \n            setTimeout(() => {\n              done();\n            }, 10);\n          });\n        });\n      });\n    });\n    describe('recursions', () => {\n      it('preparation', (done) => {\n        var memory = {\n          a: { name: 'a', childs: {\n            x: (d) => d.name == 'b',\n            y: (d) => d.name == 'c',\n          }, },\n          b: { name: 'b' },\n          c: { name: 'c', childs: {\n            z: (d) => d.name == 'a',\n          }, },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,0);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        \n        a1.prepare(() => {\n          \n          assert.equal(a1.getResult(), a1.data);\n          assert.equal(a1.childs.x.getResult(), a1.childs.x.data);\n          assert.equal(a1.childs.y.getResult(), a1.childs.y.data);\n          assert.equal(a1.childs.y.childs.z.getResult(), a1.childs.y.childs.z.data);\n          \n          done();\n        });\n      });\n      it('mounting', (done) => {\n        var memory = {\n          a: { name: 'a', childs: {\n            x: (d) => d.name == 'b',\n            y: (d) => d.name == 'c',\n          }, },\n          b: { name: 'b' },\n          c: { name: 'c', childs: {\n            z: (d) => d.name == 'a',\n          }, },\n        };\n        \n        var manager = generateManager(memory, 0, 0 ,0);\n        \n        var a1 = manager.get('a', (data) => data.name == 'a');\n        \n        a1.mount(() => {\n          \n          assert.equal(a1.getResult(), a1.data);\n          assert.equal(a1.childs.x.getResult(), a1.childs.x.data);\n          assert.equal(a1.childs.y.getResult(), a1.childs.y.data);\n          assert.equal(a1.childs.y.childs.z.getResult(), a1.childs.y.childs.z.data);\n          \n          done();\n        });\n      });\n    });\n  });\n});"]}