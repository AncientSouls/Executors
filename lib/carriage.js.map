{"version":3,"sources":["../src/lib/carriage.js"],"names":["Carriage","funicular","name","data","id","lastCarriageId","stage","childs","parents","mountedCallbacks","remountedCallbacks","unmountedCallbacks","error","state","namedCarriages","child","enable","unique","unnamedCarriages","c","call","callback","mount","tieChild","unmountError","oldChild","mountError","newChild","untieChild","tempMountedCallback","carriage","splice","indexOf","unmount","parent","childDidRemount","undefined","p","unmountChilds","disable","olda","newa"],"mappings":"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","file":"carriage.js","sourcesContent":["/**\n * Universal basic carriage for funicular.\n * @memberof ancient-funicular\n */\nclass Carriage {\n  \n  /**\n   * @param {Funicular} funicular - Link to instance of {@link Funicular}, used as namespace of carriages for this carriage.\n   * @param {String} name - Unique name of this carriage.\n   * @param data - Any outer system data needed for mounting one carriage.\n   */\n  constructor(funicular, name, data) {\n    \n    /**\n     * Link to instance of {@link Funicular}, used as namespace of carriages for this carriage.\n     * @type {Funicular}\n     * @memberof Carriage\n     * @protected\n     */\n    this.funicular = funicular;\n    \n    /**\n     * Unique id of carriages in funicular instance.\n     * @type {Number}\n     * @memberof Carriage\n     * @protected\n     */\n    this.id = funicular.lastCarriageId++;\n    \n    /**\n     * Unique name of this carriage.\n     * @type {String}\n     * @memberof Carriage\n     * @protected\n     */\n    this.name = name;\n    \n    /**\n     * Any outer system data needed for mounting one carriage.\n     * @memberof Carriage\n     * @protected\n     */\n    this.data = data;\n    \n    /**\n     * String stage of carriage. Used for place carriage in execution space.\n     * @type {String}\n     * @memberof Carriage\n     * @protected\n     */\n    this.stage = 'constructed';\n    \n    /**\n     * Object with childs carriages by names.\n     * @type {CarriagesByNames}\n     * @memberof Carriage\n     * @protected\n     */\n    this.childs = {};\n    \n    /**\n     * Object with parents carriages by names.\n     * @type {CarriagesByIds}\n     * @memberof Carriage\n     * @protected\n     */\n    this.parents = {};\n    \n    /**\n     * Callbacks after mount.\n     * @type {Carriage~mountCallback[]}\n     * @memberof Carriage\n     * @private\n     */\n    this.mountedCallbacks = [];\n    \n    /**\n     * @callback Carriage~mountedCallback\n     * @param [error]\n     * @param {Carriage} carriage\n     */\n    \n    /**\n     * Callbacks after remount.\n     * @type {Carriage~remountedCallbacks[]}\n     * @memberof Carriage\n     * @private\n     */\n    this.remountedCallbacks = [];\n    \n    /**\n     * @callback Carriage~remountedCallbacks\n     * @param [unmountError]\n     * @param {Carriage} oldCarriage\n     * @param [mountError]\n     * @param {Carriage} [newCarriage]\n     */\n    \n    /**\n     * Callbacks after unmount.\n     * @type {Carriage~unmountCallback[]}\n     * @memberof Carriage\n     * @private\n     */\n    this.unmountedCallbacks = [];\n    \n    /**\n     * @callback Carriage~unmountedCallback\n     * @param [error]\n     * @param {Carriage} carriage\n     */\n    \n    /**\n     * Last error. It is recorded if an error was received while mounting or unmounting.\n     * Can be recorded anywhere, it is worth considering that it can be and check it before important actions.\n     * @memberof Carriage\n     * @protected\n     */\n    this.error;\n    \n  }\n  \n  /**\n   * Get unique state. If sended argument `state` returns boolean.\n   * @param {Boolean} [state] - if sended, set this carriage as unique primary of this name.\n   * @returns {Boolean}\n   */\n  unique(state) {\n    if (this.name) {\n      if (typeof(state) == 'boolean') {\n        if (state) {\n          this.funicular.namedCarriages[this.name][0] = this;\n        } else {\n          delete this.funicular.namedCarriages[this.name][0];\n        }\n      }\n      return this.funicular.namedCarriages[this.name][0] == this;\n    } else return false;\n  }\n  \n  /**\n   * Tie one child with this carriage parent.\n   * @param {Carriage} child\n   */\n  tieChild(child) {\n    this.childs[child.name] = child;\n    child.parents[this.id] = this;\n  }\n  \n  /**\n   * Untie one child with this carriage parent.\n   * @param {Carriage} child\n   */\n  untieChild(child) {\n    delete this.childs[child.name];\n    delete child.parents[this.id];\n  }\n  \n  /**\n   * Based on data, mount this carriage.\n   * Use {@link Carriage.enable} for useful functionality.\n   * Calls all functions from {@link Carriage.mountedCallbacks}, if this carriage did unmount.\n   */\n  mount() {\n    this.enable((error) => {\n      this.error = error;\n      this.stage = error?'error':'mounted';\n      if (!error) {\n        if (typeof(this.name) == 'string') {\n          this.funicular.namedCarriages[this.name] = this.funicular.namedCarriages[this.name] || {};\n          this.funicular.namedCarriages[this.name][this.id] = this;\n          this.unique(true);\n        } else {\n          this.funicular.unnamedCarriages[this.id] = this;\n        }\n      }\n      for (var c in this.mountedCallbacks) {\n        this.mountedCallbacks[c].call(this, error, this);\n      }\n    });\n  }\n  \n  /**\n   * Mount carriage as child for this carriage.\n   * @param {String} name\n   * @param data\n   * @param {Carriage~mountCallback} [callback]\n   */\n  mountChild(name, data, callback) {\n    this.funicular.mount(\n      name, data,\n      (error, child) => {\n        if (this.stage != 'unmounted') {\n          this.tieChild(child);\n          callback();\n        }\n      },\n      (unmountError, oldChild, mountError, newChild) => {\n        this.untieChild(oldChild);\n        this.tieChild(newChild);\n      },\n      (error, child) => {\n        this.untieChild(child);\n      }\n    );\n  }\n  \n  /**\n   * You must override it with useful functionality.\n   * Can gets and mount childs carriages into {@link Carriage.childs}.\n   * It method must added, enable, run and write all that was forgeted, disabled, stoped and erased at {@link Carriage.disable}.\n   * It must call callback! Otherwise, the demounting chain may break.\n   * @param {Carriage~enableCallback} callback\n   */\n  enable(callback) {\n    callback();\n  }\n  \n  /**\n   * @callback Carriage~enableCallback\n   * @param error\n   */\n  \n  /**\n   * Remount this carriage.\n   * @todo\n   * If {@link Carriage.invalid} is `true`, mount new carriage based on this name and data and unmount this carriage.\n   */\n  remount() {\n    var tempMountedCallback = (mountError, carriage) => {\n      carriage.mountedCallbacks.splice(carriage.mountedCallbacks.indexOf(tempMountedCallback), 1);\n      carriage.mountedCallbacks = this.mountedCallbacks;\n      this.mountedCallbacks = [];\n      carriage.remountedCallbacks = this.remountedCallbacks;\n      carriage.unmountedCallbacks = this.unmountedCallbacks;\n      this.unmountedCallbacks = [];\n      this.unmount((unmountError) => {\n        for (var c in this.remountedCallbacks) {\n          this.remountedCallbacks[c].call(this, unmountError, this, mountError, carriage);\n        }\n        this.remountedCallbacks = [];\n        for (var parent in this.parents) {\n          this.parents[parent].childDidRemount(unmountError, this, mountError, carriage);\n        }\n      });\n    };\n    this.funicular.mount(\n      this.name, this.data,\n      tempMountedCallback, undefined, undefined,\n      true\n    );\n  }\n  \n  /**\n   * Sort unmount this carriage with childs.\n   * The carriages necessary for some other carriages will not be unmounted.\n   * Calls all functions from {@link Carriage.unmountedCallbacks}, if this carriage did unmount.\n   * Calls argument callback in any case, even if the unmount did not happen.\n   * @param {Carriage~unmountCallback} [callback]\n   */\n  unmount(callback) {\n    for (var p in this.parents) {\n      if (callback) callback(undefined, this);\n      return; // If parents exists, umount cannot be done.\n    }\n    if (this.stage == 'mounted') {\n      this.unmountChilds();\n      this.disable((error) => {\n        this.error = error;\n        this.stage = this.error?'error':'unmounted';\n        if (typeof(this.name) == 'string') {\n          delete this.funicular.namedCarriages[this.name][this.id];\n          if (this.funicular.namedCarriages[this.name][0] == this) {\n            delete this.funicular.namedCarriages[this.name][0];\n          };\n        } else {\n          delete this.funicular.unnamedCarriages[this.id];\n        }\n        for (var c in this.unmountedCallbacks) {\n          this.unmountedCallbacks[c].call(this, error, this);\n        }\n        if (callback) callback(error, this);\n      });\n    } else {\n      if (callback) callback(undefined, this);\n    }\n  }\n  \n  /**\n   * Cicle for sort unmount childs of this carriage.\n   * Not asynchronously and with callback, because there is no sense in waiting for the end of the unmounting childs.\n   * If you do not agree please describe the reason in the issues.\n   */\n  unmountChilds() {\n    for (var c in this.childs) {\n      var child = this.childs[c];\n      this.untieChild(child);\n      child.unmount();\n    }\n  }\n  \n  /**\n   * You must override it with useful functionality.\n   * It method must forget, disable, stop and erase all that was added, enabled, runned and writed at {@link Carriage.enable}.\n   * It must call callback! Otherwise, the demounting chain may break.\n   * @param {Carriage~disableCallback} callback\n   */\n  disable(callback) {\n    callback();\n  }\n  \n  /**\n   * @callback Carriage~disableCallback\n   * @param error\n   */\n  \n  /**\n   * You can override it with useful functionality.\n   * Synchronously answers the question - is it necessary to remount this parent while remounting the child?\n   * @param [unmountError]\n   * @param {Carriage} oldCarriage\n   * @param [mountError]\n   * @param {Carriage} [newCarriage]\n   */\n  childDidRemount(unmountError, olda, mountError, newa) {}\n}\n\nexport default Carriage;"]}