{"version":3,"sources":["../src/lib/manager.js"],"names":["Manager","Item","_items","_Item","name","query","isReplaced","isUnmounted"],"mappings":"ikBAAA,4B,2QAEA;;MAGMA,Q,YAEJ;;;KAIA,iBAAYC,IAAZ,CAAkB,+BAEhB;;;;;OAMA,KAAKC,MAAL,CAAc,EAAd,CAEA;;;OAIC,KAAKC,KAAL,CAAaF,IAEf,CAED;;;;;;;;;;;;yDAaIG,I,CAAMC,K,CAAO,CACf,GAAID,IAAJ,CAAU,CACR,GAAI,KAAKF,MAAL,CAAYE,IAAZ,GAAqB,CAAC,KAAKF,MAAL,CAAYE,IAAZ,EAAkBE,UAAxC,EAAsD,CAAC,KAAKJ,MAAL,CAAYE,IAAZ,EAAkBG,WAA7E,CAA0F,MAAO,MAAKL,MAAL,CAAYE,IAAZ,CAAP,CAA1F,IACK,OAAQ,MAAKF,MAAL,CAAYE,IAAZ,EAAoB,GAAI,MAAKD,KAAT,CAAe,IAAf,CAAqBC,IAArB,CAA2BC,KAA3B,CAClC,CAHD,IAGO,CACL,MAAO,IAAI,MAAKF,KAAT,CAAe,IAAf,CAAqBC,IAArB,CAA2BC,KAA3B,CACR,CACF,C,sCAIYL,O","file":"manager.js","sourcesContent":["import Item from './item';\n\n/**\n * @class\n */\nclass Manager {\n  \n  /**\n   * @constructs Manager\n   * @param {function} Item - class extended from Item\n   */\n  constructor(Item) {\n    \n    /**\n     * @type {Object.<GlobalName,Item>}\n     * @protected\n     * @description\n     * Contains last versions of registred named items by global names.\n     */\n    this._items = {};\n    \n    /**\n     * @type {function}\n     * @protected\n     */\n     this._Item = Item;\n    \n  }\n  \n  /**\n   * @param {string} name - If not sended, create new unnamed item.\n   * @param [query] - Preparation is responsible for responding to the query. It may, query can be required in your Item class. \n   * @returns {Item}\n   * @description\n   * Responsible for:\n   * * Constructing new item, if not exists not remounted or unmounted item with equal name.\n   * * Register items as in {@ling Manager#_items}\n   * > Attention! It is not a mount tool, only a search. Prepare and mount manually!\n   * @example\n   * var a = manager.get('a');\n   * a.name == 'a'; // true\n   */\n  get(name, query) {\n    if (name) {\n      if (this._items[name] && !this._items[name].isReplaced && !this._items[name].isUnmounted) return this._items[name];\n      else return (this._items[name] = new this._Item(this, name, query));\n    } else {\n      return new this._Item(this, name, query);\n    }\n  }\n  \n}\n\nexport default Manager;"]}