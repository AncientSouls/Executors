{"version":3,"sources":["../src/lib/index.js"],"names":["Carriage","name","stage","childs","_childs","_parents","data","undefined","callback","Error","error","newData","subscribe","generateChildNamesFromData","mountChilds","unsubscribe","unsafeMount","funicular","carriages","id","state","Object","keys","length","roots","unmountChilds","unsafeUnmount","childCarriages","child","nextChild","mount","carriage","push","unmount","tieChild","untieChild","Funicular","arguments","lastId","unmountRoot","default"],"mappings":"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","file":"index.js","sourcesContent":["import each from 'async/each';\n\n/**\n * @example\n * var carriage = new funicular.Carriage('abc');\n */\nclass Carriage {\n  /**\n   * @param {String} name\n   */\n  constructor(name) {\n    this.name = name;\n    \n    /**\n     * * 'broken' - Broken in any method... somewere.\n     * * 'construct' - Not subscribed, fetched and mounted. Just constructed and registred in funicular.\n     * * 'fetched' - Subscribed and fetched.\n     * * 'mounted' - Mounted.\n     * * 'unmounted' - Unmounted.\n     */\n    this.stage = 'construct';\n    // ['name']\n    this.childs = [];\n    // { name: Carriage }\n    this._childs = {};\n    // { name: Carriage }\n    this._parents = {};\n    this.data = undefined;\n  }\n  \n  /**\n   * Subscribe to get data, data updates and removes events.\n   * Sets `carriage.unsubscribe` method for stop current subscription.\n   * \n   * @param {Function} callback\n   */\n  subscribe(callback) {\n    throw new Error('Method subscribe must be overriden!');\n  }\n  \n  /**\n   * Generate childs array from already fetched data.\n   * Sets array `carriage.childs` with string names of child carriages.\n   */\n  generateChildNamesFromData(callback) {\n    throw new Error('Method generateChildNamesFromData must be overriden!');\n  }\n  \n  /**\n   * Method for calling from subscribe method, when data is fetched.\n   * Sets `this.data` key in carriage object.\n   * \n   * @param error\n   * @param newData\n   */\n  fetched(error, newData) {\n    if (error) {\n      this.stage = 'broken';\n    } else {\n      this.stage = 'fetched';\n      this.data = newData;\n    }\n  }\n  \n  /**\n   * Method for calling from subscribe method, when data is updated.\n   * \n   * @param newData\n   */\n  updated(newData) {\n    this.data = newData;\n  }\n  \n  /**\n   * Method for calling from subscribe method, when data is removed.\n   */\n  removed() {}\n  \n  /**\n   * Register this carriage in childs.\n  \n  /**\n   * Unsafe mount and do what need to do...\n   * Attention! Not for personal usage.\n   * @param {Carriage~unmountCallback} [callback]\n   */\n  unsafeMount(callback) {\n    this.stage = 'mounted';\n    if (typeof(callback) == 'function') {\n      callback();\n    }\n  }\n  \n  /**\n   * Subscribed data by name, getting childs names, mount childs, then mount this carriage. If an error occurs, then transactions with subscriptions and children are rolled back.\n   * @param {Carriage~mountCallback} [callback]\n   */\n  mount(callback) {\n    this.subscribe((error) => {\n      if (error) callback(error);\n      else {\n        this.generateChildNamesFromData();\n        this.mountChilds((error) => {\n          if (error) {\n            this.unsubscribe();\n            callback(error);\n          }\n          else this.unsafeMount(callback);\n        });\n      }\n    });\n  }\n  \n  /**\n   * @callback Carriage~mountCallback\n   * @param error\n   */\n  \n  /**\n   * Unsafe unmount and unregister from carriages in funicular.\n   * Attention! Not for personal usage.\n   * @param {Carriage~unmountCallback} [callback]\n   */\n  unsafeUnmount(callback) {\n    this.stage = 'unmounted';\n    delete this.funicular.carriages[this.name][this.id];\n    this.unsubscribe();\n    if (typeof(callback) == 'function') {\n      callback();\n    }\n  }\n  \n  /**\n   * Safe unmount, unregister from parents and childs lists in some carriages.\n   * Attention! Not for personal usage.\n   * @param {Carriage~unmountCallback} [callback]\n   */\n  unmount(callback) {\n    if (\n      this.state != 'unmounted' && this.state != 'broken' &&\n      Object.keys(this._parents).length === 0 && !this.funicular.roots[this.id]\n    ) {\n      this.unmountChilds(() => {\n        this.unsafeUnmount(callback);\n      });\n    } else if (typeof(callback) == 'function') {\n      callback();\n    }\n  }\n  \n  /**\n   * @callback Carriage~unmountCallback\n   * @param error\n   */\n  \n  /**\n   * Mount all child names from array in `this.childs`.\n   * @param {Carriage~mountCallback} [callback]\n   */\n  mountChilds(callback) {\n    var childCarriages = [];\n    each(this.childs, (child, nextChild) => {\n      this.funicular.mount(child, (error, carriage) => {\n        if (error) nextChild(error);\n        else {\n          childCarriages.push(carriage);\n          nextChild();\n        }\n      });\n    }, (error) => {\n      if (error) {\n        each(childCarriages, (child, nextChild) => {\n          child.unmount(() => nextChild());\n        }, () => {\n          callback(error);\n        });\n      } else {\n        for (var child of childCarriages) {\n          this.tieChild(child);\n        }\n        callback();\n      }\n    });\n  }\n  \n  /**\n   * Tie one child with this carriage parent.\n   * @param {Carriage} child\n   */\n  tieChild(child) {\n    this._childs[child.name] = child;\n    child._parents[this.name] = this;\n  }\n  \n  /**\n   * Unmount all childs from object in `this._childs`.\n   * @param {Carriage~unmountCallback} [callback]\n   */\n  unmountChilds(callback) {\n    each(this._childs, (child, nextChild) => {\n      this.untieChild(child);\n      child.unmount(() => nextChild());\n    }, () => {\n      callback();\n    });\n  }\n  \n  /**\n   * Untie one child with this carriage parent.\n   * @param {Carriage} child\n   */\n  untieChild(child) {\n    delete this._childs[child.name];\n    delete child._parents[this.name];\n  }\n}\n\n/**\n * @example\n * import { Funicular } from 'ancient-funicular';\n * var funicular = new Funicular();\n * var OldCarriage = funicular.Carriage;\n * funicular.Carriage = class extends OldCarriage {}\n */\nclass Funicular {\n  constructor() {\n    var funicular = this;\n    \n    this.Carriage = class extends Carriage {\n      constructor() {\n        super(...arguments);\n        this.funicular = funicular;\n        this.id = ++this.funicular.lastId;\n        \n        funicular.carriages[this.name] = funicular.carriages[this.name] || {};\n        funicular.carriages[this.name][this.id] = this;\n      }\n    };\n    \n    this.lastId = 0;\n    // { name: { id: Carriage, id: Carriage }, name: { id: Carriage, id: Carriage }, name: { id: Carriage, id: Carriage } }\n    this.carriages = {};\n    // { id: Carriage }\n    this.roots = {};\n  }\n  \n  /**\n   * Method for mount new carriage in this funicular.\n   * Attention! Not for personal usage because not auto mark carriage aschild and parent. For personal, custom usage please use method {@link Funicular#mountRoot}\n   * \n   * @param {String} name\n   * @param {Funicular~mountCallback} [callback] - Gets already mounted or broken carriage.\n   */\n  mount(name, callback) {\n    var carriage = new this.Carriage(name);\n    var callback = callback || ((error) => { throw error; });\n    carriage.mount((error) => {\n      callback(error, carriage);\n    });\n  }\n  \n  /**\n   * Method for mount new carriage in this funicular as root.\n   * Use for unmount method {@link Carriage#unmountRoot}\n   * \n   * @param {String} name\n   * @param {Funicular~mountCallback} [callback]\n   * @returns {Funicular~unmountRoot} Returns method for unmount current root mounting instance of carriage, and unmount carriage only if it last root mounting instance and parents is not exists.\n   */\n  mountRoot(name, callback) {\n    this.mount(name, (error, carriage) => {\n      if (!error) this.roots[carriage.id] = carriage;\n      var unmountRoot = (callback) => {\n        delete this.roots[carriage.id];\n        carriage.unmount(callback);\n      };\n      callback(error, carriage, unmountRoot);\n    });\n  }\n  \n  /**\n   * @callback Funicular~mountCallback\n   * @param error\n   * @param {Carriage} carriage\n   */\n};\n\nexport {\n  Funicular as default,\n  Carriage,\n}"]}