{"version":3,"sources":["../src/lib/index.js"],"names":["Carriage","name","stage","childs","_childs","_parents","data","undefined","callback","error","newData","Funicular","funicular","arguments","id","lastId","carriages","carriage","subscribe"],"mappings":"42CAAA;;;MAIMA,S,YACJ;;KAGA,kBAAYC,IAAZ,CAAkB,gCAChB,KAAKA,IAAL,CAAYA,IAAZ,CAEA;;;;;;OAOA,KAAKC,KAAL,CAAa,WAAb,CACA;AACA,KAAKC,MAAL,CAAc,EAAd,CACA;AACA,KAAKC,OAAL,CAAe,EAAf,CACA;AACA,KAAKC,QAAL,CAAgB,EAAhB,CACA,KAAKC,IAAL,CAAYC,SACb,CAED;;;;;sEAMUC,Q,CAAU,CAAE,CAEtB;;;;;;6CAOQC,K,CAAOC,O,CAAS,CACtB,KAAKR,KAAL,CAAa,SAAb,CACA,KAAKI,IAAL,CAAYI,OACb,CAED;;;;6CAKQA,O,CAAS,CACf,KAAKJ,IAAL,CAAYI,OACb,CAED;;8CAGU,CAAE,C,0BAGRC,U,YACJ,oBAAc,iCACZ,GAAIC,WAAY,IAAhB,CAEA,KAAKZ,QAAL,iDACE,iBAAc,qIACHa,SADG,GAEZ,MAAKD,SAAL,CAAiBA,SAAjB,CACA,MAAKE,EAAL,CAAU,EAAE,MAAKF,SAAL,CAAeG,MAA3B,CAEAH,UAAUI,SAAV,CAAoB,MAAKf,IAAzB,EAAiCW,UAAUI,SAAV,CAAoB,MAAKf,IAAzB,GAAkC,EAAnE,CACAW,UAAUI,SAAV,CAAoB,MAAKf,IAAzB,EAA+B,MAAKa,EAApC,QANY,YAOb,CARH,eAA8Bd,QAA9B,EAWA,KAAKe,MAAL,CAAc,CAAd,CACA;AACA,KAAKC,SAAL,CAAiB,EAClB,CAED;;;;;+DAMMf,I,CAAMO,Q,CAAU,CACpB,GAAIS,UAAW,GAAI,MAAKjB,QAAT,CAAkBC,IAAlB,CAAf,CACAgB,SAASC,SAAT,CAAmB,UAAM,CACvB,GAAI,MAAOV,SAAP,EAAoB,UAAxB,CAAoC,CAClCA,SAASD,SAAT,CAAoBU,QAApB,CACD,CACF,CAJD,CAKD,CAED;;;;6BAKD,C,QAGCN,S,CAAAA,S,SACAX,Q,CAAAA,Q","file":"index.js","sourcesContent":["/**\n * @example\n * var carriage = new Carriage('abc');\n */\nclass Carriage {\n  /**\n   * @param {String} name\n   */\n  constructor(name) {\n    this.name = name;\n    \n    /**\n     * * 'broken' - Broken in any method... somewere.\n     * * 'construct' - Not subscribed, fetched and mounted. Just constructed and registred in funicular.\n     * * 'fetched' - Subscribed and fetched.\n     * * 'mounted' - Mounted.\n     * * 'unmounted' - Unmounted.\n     */\n    this.stage = 'construct';\n    // ['name']\n    this.childs = [];\n    // { name: Carriage }\n    this._childs = {};\n    // { name: Carriage }\n    this._parents = {};\n    this.data = undefined;\n  }\n  \n  /**\n   * Subscribe to get data, data updates and removes events.\n   * \n   * @param {Function} callback\n   * @returns {Function} Method for stop current subscribtion.\n   */\n  subscribe(callback) {}\n  \n  /**\n   * Method for calling from subscribe method, when data is fetched.\n   * Sets `this.data` key in carriage object.\n   * \n   * @param error\n   * @param newData\n   */\n  fetched(error, newData) {\n    this.stage = 'fetched';\n    this.data = newData;\n  }\n  \n  /**\n   * Method for calling from subscribe method, when data is updated.\n   * \n   * @param newData\n   */\n  updated(newData) {\n    this.data = newData;\n  }\n  \n  /**\n   * Method for calling from subscribe method, when data is removed.\n   */\n  removed() {}\n}\n\nclass Funicular {\n  constructor() {\n    var funicular = this;\n    \n    this.Carriage = class extends Carriage {\n      constructor() {\n        super(...arguments);\n        this.funicular = funicular;\n        this.id = ++this.funicular.lastId;\n        \n        funicular.carriages[this.name] = funicular.carriages[this.name] || {};\n        funicular.carriages[this.name][this.id] = this;\n      }\n    };\n    \n    this.lastId = 0;\n    // { name: { id: Carriage, id: Carriage }, name: { id: Carriage, id: Carriage }, name: { id: Carriage, id: Carriage } }\n    this.carriages = {};\n  }\n  \n  /**\n   * Method for mount new carriage in this funicular.\n   * \n   * @param {String} name\n   * @param {Funicular~mountCallback} [callback]\n   */\n  mount(name, callback) {\n    var carriage = new this.Carriage(name);\n    carriage.subscribe(() => {\n      if (typeof(callback) == 'function') {\n        callback(undefined, carriage);\n      }\n    });\n  }\n  \n  /**\n   * @callback Funicular~mountCallback\n   * @param error\n   * @param {Carriage} carriage\n   */\n};\n\nexport {\n  Funicular,\n  Carriage,\n}"]}