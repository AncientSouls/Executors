{"version":3,"sources":["../src/lib/index.js"],"names":["Carriage","query","stage","childs","_childs","_parents","data","undefined","roots","unmountedCallbacks","mountedCallbacks","callback","Error","error","newData","funicular","carriages","name","id","mountedCallback","subscribe","getChildsQueries","mountChilds","unsubscribe","unsafeMount","unmountedCallback","state","Object","keys","length","unmountChilds","unsafeUnmount","childCarriages","child","nextChild","mount","carriage","push","unmount","tieChild","untieChild","rootId","index","indexOf","splice","otherCarriage","root","Funicular","arguments","lastCarriageId","lastRootId","tieRoot","unmountRoot","untieRoot","default"],"mappings":"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","file":"index.js","sourcesContent":["import each from 'async/each';\n\n/**\n * @example\n * var carriage = new funicular.Carriage('abc');\n */\nclass Carriage {\n  /**\n   * @param query\n   */\n  constructor(query) {\n    this.query = query;\n    \n    /**\n     * * `broken` - Broken in any method... somewere.\n     * * `construct` - Not subscribed, fetched and mounted. Just constructed and registred in funicular.\n     * * `fetched` - Subscribed and fetched.\n     * * `mounted` - Mounted.\n     * * `unmounted` - Unmounted.\n     */\n    this.stage = 'construct';\n    // ['name']\n    this.childs = [];\n    // { name: Carriage }\n    this._childs = {};\n    // { name: Carriage }\n    this._parents = {};\n    this.data = undefined;\n    this.roots = [];\n    this.unmountedCallbacks = [];\n    this.mountedCallbacks = [];\n  }\n  \n  /**\n   * Subscribe to get data, data updates and removes events.\n   * Must sets `carriage.unsubscribe` method for stop current subscription.\n   * Must sets `this.name` string **before** calls `fetched`.\n   * \n   * @param {Function} callback\n   */\n  subscribe(callback) {\n    throw new Error('Method subscribe must be overriden!');\n  }\n  \n  /**\n   * Generate childs array from already fetched data.\n   * Sets array `carriage.childs` with string names of child carriages.\n   * @param {Function} callback\n   */\n  getChildsQueries(callback) {\n    throw new Error('Method getChildsQueries must be overriden!');\n  }\n  \n  /**\n   * Method for calling from subscribe method, when data is fetched.\n   * Sets `this.data` key in carriage object.\n   * \n   * @param error\n   * @param newData\n   */\n  fetched(error, newData) {\n    if (error) {\n      this.stage = 'broken';\n    } else {\n      this.stage = 'fetched';\n      this.data = newData;\n    }\n  }\n  \n  /**\n   * Method for calling from subscribe method, when data is updated.\n   * \n   * @param newData\n   */\n  updated(newData) {\n    this.data = newData;\n  }\n  \n  /**\n   * Method for calling from subscribe method, when data is removed.\n   */\n  removed() {}\n  \n  /**\n   * Unsafe mount and do what need to do...\n   * Attention! Not for external usage.\n   * @param {Carriage~unmountCallback} [callback]\n   */\n  unsafeMount(callback) {\n    this.stage = 'mounted';\n    this.funicular.carriages[this.name] = this.funicular.carriages[this.name] || {};\n    this.funicular.carriages[this.name][this.id] = this;\n    if (typeof(callback) == 'function') {\n      callback();\n    }\n  }\n  \n  /**\n   * Subscribed data by name, getting childs names, mount childs, then mount this carriage. If an error occurs, then transactions with subscriptions and children are rolled back.\n   * @param {Carriage~mountCallback} [mountedCallback]\n   */\n  mount(mountedCallback) {\n    var callback = (error) => {\n      if (mountedCallback) mountedCallback(error, this);\n      for (var callback of this.mountedCallbacks) {\n        callback(error, this);\n      }\n    };\n    this.subscribe((error) => {\n      if (error) callback(error);\n      else {\n        this.getChildsQueries(() => {\n          this.mountChilds((error) => {\n            if (error) {\n              this.unsubscribe();\n              callback(error);\n            }\n            else this.unsafeMount(callback);\n          });\n        });\n      }\n    });\n  }\n  \n  /**\n   * Argument for `funicular.mountRoot`.\n   * \n   * @callback Carriage~mountCallback\n   * @param error\n   * @param {Carriage} carriage\n   * @param {Function} unmountCarriage\n   */\n  \n  /**\n   * Unsafe unmount and unregister from carriages in funicular.\n   * Attention! Not for external usage.\n   * @param {Carriage~unmountCallback} [callback]\n   */\n  unsafeUnmount(callback) {\n    this.stage = 'unmounted';\n    delete this.funicular.carriages[this.name][this.id];\n    this.unsubscribe();\n    for (var unmountedCallback of this.unmountedCallbacks) {\n      unmountedCallback(this);\n    }\n    if (typeof(callback) == 'function') {\n      callback();\n    }\n  }\n  \n  /**\n   * Safe unmount, unregister from parents and childs lists in some carriages.\n   * Attention! Not for external usage.\n   * @param {Carriage~unmountCallback} [callback]\n   */\n  unmount(callback) {\n    if (\n      this.state != 'unmounted' && this.state != 'broken' &&\n      Object.keys(this._parents).length === 0 && !this.roots.length\n    ) {\n      this.unmountChilds(() => {\n        this.unsafeUnmount(callback);\n      });\n    } else if (typeof(callback) == 'function') {\n      callback();\n    }\n  }\n  \n  /**\n   * Argument for `funicular.mountRoot`.\n   * \n   * @callback Carriage~unmountCallback\n   * @param error\n   */\n  \n  /**\n   * Mount all child names from array in `this.childs`.\n   * @param {Carriage~mountCallback} [callback]\n   */\n  mountChilds(callback) {\n    var childCarriages = [];\n    each(this.childs, (child, nextChild) => {\n      this.funicular.mount(child, (error, carriage) => {\n        if (error) nextChild(error);\n        else {\n          childCarriages.push(carriage);\n          nextChild();\n        }\n      });\n    }, (error) => {\n      if (error) {\n        each(childCarriages, (child, nextChild) => {\n          child.unmount(() => nextChild());\n        }, () => {\n          callback(error);\n        });\n      } else {\n        for (var child of childCarriages) {\n          this.tieChild(child);\n        }\n        callback();\n      }\n    });\n  }\n  \n  /**\n   * Tie one child with this carriage parent.\n   * @param {Carriage} child\n   */\n  tieChild(child) {\n    this._childs[child.name] = child;\n    child._parents[this.name] = this;\n  }\n  \n  /**\n   * Unmount all childs from object in `this._childs`.\n   * @param {Carriage~unmountCallback} [callback]\n   */\n  unmountChilds(callback) {\n    each(this._childs, (child, nextChild) => {\n      this.untieChild(child);\n      child.unmount(() => nextChild());\n    }, () => {\n      callback();\n    });\n  }\n  \n  /**\n   * Untie one child with this carriage parent.\n   * @param {Carriage} child\n   */\n  untieChild(child) {\n    delete this._childs[child.name];\n    delete child._parents[this.name];\n  }\n  \n  /**\n   * Tie this carriage with some root id.\n   * @param {number} rootId\n   */\n  tieRoot(rootId) {\n    this.funicular.roots[rootId] = this;\n    var index = this.roots.indexOf(rootId);\n    if (index == -1) this.roots.push(rootId);\n  }\n  \n  /**\n   * Untie this carriage from some root id.\n   * @param {number} rootId\n   */\n  untieRoot(rootId) {\n    delete this.funicular.roots[rootId];\n    var index = this.roots.indexOf(rootId);\n    this.roots.splice(index, 1);\n  }\n  \n  /**\n   * Move roots from one carriage to other.\n   * @param {Carriage} otherCarriage\n   */\n  moveRoots(otherCarriage) {\n    otherCarriage.roots = this.roots;\n    this.roots = [];\n    for (var root in this.roots) {\n      this.funicular.roots[root] = otherCarriage;\n    }\n  }\n  \n  /**\n   * @callback Carriage~unmountedCallback\n   * @param {Carriage} carriage\n   */\n  \n}\n\n/**\n * @example\n * import { Funicular } from 'ancient-funicular';\n * var funicular = new Funicular();\n * var OldCarriage = funicular.Carriage;\n * funicular.Carriage = class extends OldCarriage {}\n */\nclass Funicular {\n  constructor() {\n    var funicular = this;\n    \n    this.Carriage = class extends Carriage {\n      constructor() {\n        super(...arguments);\n        this.funicular = funicular;\n        this.id = ++this.funicular.lastCarriageId;\n      }\n    };\n    \n    this.lastCarriageId = 0;\n    this.lastRootId = 0;\n    // { name: { id: Carriage, id: Carriage }, name: { id: Carriage, id: Carriage }, name: { id: Carriage, id: Carriage } }\n    this.carriages = {};\n    // { id: Carriage }\n    this.roots = {};\n  }\n  \n  /**\n   * Method for mount new carriage in this funicular.\n   * Attention! Not for external usage because not auto mark carriage aschild and parent. For external, custom usage please use method {@link Funicular#mountRoot}\n   * \n   * @param query\n   * @param {Funicular~mountCallback} [mountedCallback] - Gets already mounted or broken carriage.\n   * @param {Funicular~unmountedCallback} [unmountedCallback] - Gets unmounted carriage.\n   */\n  mount(query, mountedCallback, unmountedCallback) {\n    var carriage = new this.Carriage(query);\n    var mountedCallback = mountedCallback || ((error) => { throw error; });\n    if (mountedCallback) carriage.mountedCallbacks.push(mountedCallback);\n    if (unmountedCallback) carriage.unmountedCallbacks.push(unmountedCallback);\n    carriage.mount();\n  }\n  \n  /**\n   * Method for mount new carriage in this funicular as root.\n   * Use for unmount method {@link Carriage#unmountRoot}\n   * \n   * @param query\n   * @param {Funicular~mountCallback} [mountedCallback] - Gets already mounted or broken carriage.\n   * @param {Funicular~unmountedCallback} [unmountedCallback] - Gets unmounted carriage.\n   * \n   * @example\n   * funicular.mountRoot(\n   *   'someDataReference',\n   *   (error, carriage, unmountCarriage) => {\n   *     // carriage someDataReference with all childs are mounted\n   *     setTimeout(() => { unmountCarriage(); }, 1000);\n   *   },\n   *   (carriage) => {\n   *     // carriage someDataReference and free of parents childs are unmounted \n   *   }\n   * );\n   */\n  mountRoot(query, mountedCallback, unmountedCallback) {\n    var rootId = ++this.lastRootId;\n    this.mount(query, (error, carriage) => {\n      if (!error) {\n        carriage.tieRoot(rootId);\n      }\n      var unmountRoot = (callback) => {\n        if (this.roots[rootId]) {\n          var carriage = this.roots[rootId];\n          carriage.untieRoot(rootId);\n          carriage.unmount(callback);\n        } else callback();\n      };\n      mountedCallback(error, carriage, unmountRoot);\n    }, unmountedCallback);\n  }\n  \n  /**\n   * @callback Funicular~mountCallback\n   * @param error\n   * @param {Carriage} carriage\n   */\n  \n  /**\n   * @callback Funicular~unmountedCallback\n   * @param {Carriage} carriage\n   */\n};\n\nexport {\n  Funicular as default,\n  Carriage,\n}"]}