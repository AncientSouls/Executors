{"version":3,"sources":["../src/lib/index.js"],"names":["Carriage","name","stage","childs","_childs","_parents","data","undefined","callback","error","newData","funicular","carriages","id","unsubscribe","Funicular","arguments","lastId","carriage","subscribe","mount"],"mappings":"42CAAA;;;MAIMA,S,YACJ;;KAGA,kBAAYC,IAAZ,CAAkB,gCAChB,KAAKA,IAAL,CAAYA,IAAZ,CAEA;;;;;;OAOA,KAAKC,KAAL,CAAa,WAAb,CACA;AACA,KAAKC,MAAL,CAAc,EAAd,CACA;AACA,KAAKC,OAAL,CAAe,EAAf,CACA;AACA,KAAKC,QAAL,CAAgB,EAAhB,CACA,KAAKC,IAAL,CAAYC,SACb,CAED;;;;;sEAMUC,Q,CAAU,CAAE,CAEtB;;;;;;6CAOQC,K,CAAOC,O,CAAS,CACtB,GAAID,KAAJ,CAAW,CACT,KAAKP,KAAL,CAAa,QACd,CAFD,IAEO,CACL,KAAKA,KAAL,CAAa,SAAb,CACA,KAAKI,IAAL,CAAYI,OACb,CACF,CAED;;;;6CAKQA,O,CAAS,CACf,KAAKJ,IAAL,CAAYI,OACb,CAED;;8CAGU,CAAE,CAEZ;;;yCAIMF,Q,CAAU,CACd,KAAKN,KAAL,CAAa,SAAb,CACA,GAAI,MAAOM,SAAP,EAAoB,UAAxB,CAAoC,CAClCA,UACD,CACF,CAED;;;KAKA;;;6CAIQA,Q,CAAU,CAChB,KAAKN,KAAL,CAAa,WAAb,CACA,MAAO,MAAKS,SAAL,CAAeC,SAAf,CAAyB,KAAKX,IAA9B,EAAoC,KAAKY,EAAzC,CAAP,CACA,KAAKC,WAAL,GACA,GAAI,MAAON,SAAP,EAAoB,UAAxB,CAAoC,CAClCA,UACD,CACF,CAED;;;+BAMIO,U,YACJ,oBAAc,iCACZ,GAAIJ,WAAY,IAAhB,CAEA,KAAKX,QAAL,iDACE,iBAAc,qIACHgB,SADG,GAEZ,MAAKL,SAAL,CAAiBA,SAAjB,CACA,MAAKE,EAAL,CAAU,EAAE,MAAKF,SAAL,CAAeM,MAA3B,CAEAN,UAAUC,SAAV,CAAoB,MAAKX,IAAzB,EAAiCU,UAAUC,SAAV,CAAoB,MAAKX,IAAzB,GAAkC,EAAnE,CACAU,UAAUC,SAAV,CAAoB,MAAKX,IAAzB,EAA+B,MAAKY,EAApC,QANY,YAOb,CARH,eAA8Bb,QAA9B,EAWA,KAAKiB,MAAL,CAAc,CAAd,CACA;AACA,KAAKL,SAAL,CAAiB,EAClB,CAED;;;;;+DAMMX,I,CAAMO,Q,CAAU,CACpB,GAAIU,UAAW,GAAI,MAAKlB,QAAT,CAAkBC,IAAlB,CAAf,CACA,GAAIO,UAAWA,UAAa,SAACC,KAAD,CAAW,CAAE,KAAMA,MAAQ,CAAvD,CACAS,SAASC,SAAT,CAAmB,SAACV,KAAD,CAAW,CAC5B,GAAIA,KAAJ,CAAWD,SAASC,KAAT,EAAX,IACKS,UAASE,KAAT,CAAe,SAACX,KAAD,CAAW,CAC7B,GAAIA,KAAJ,CAAWD,SAASC,KAAT,EAAX,IACKD,UAASD,SAAT,CAAoBW,QAApB,CACN,CAHI,CAIN,CAND,CAOD,CAED;;;;6BAKD,C,QAGCH,S,CAAAA,S,SACAf,Q,CAAAA,Q","file":"index.js","sourcesContent":["/**\n * @example\n * var carriage = new Carriage('abc');\n */\nclass Carriage {\n  /**\n   * @param {String} name\n   */\n  constructor(name) {\n    this.name = name;\n    \n    /**\n     * * 'broken' - Broken in any method... somewere.\n     * * 'construct' - Not subscribed, fetched and mounted. Just constructed and registred in funicular.\n     * * 'fetched' - Subscribed and fetched.\n     * * 'mounted' - Mounted.\n     * * 'unmounted' - Unmounted.\n     */\n    this.stage = 'construct';\n    // ['name']\n    this.childs = [];\n    // { name: Carriage }\n    this._childs = {};\n    // { name: Carriage }\n    this._parents = {};\n    this.data = undefined;\n  }\n  \n  /**\n   * Subscribe to get data, data updates and removes events.\n   * Sets `carriage.unsubscribe` method for stop current subscribtion.\n   * \n   * @param {Function} callback\n   */\n  subscribe(callback) {}\n  \n  /**\n   * Method for calling from subscribe method, when data is fetched.\n   * Sets `this.data` key in carriage object.\n   * \n   * @param error\n   * @param newData\n   */\n  fetched(error, newData) {\n    if (error) {\n      this.stage = 'broken';\n    } else {\n      this.stage = 'fetched';\n      this.data = newData;\n    }\n  }\n  \n  /**\n   * Method for calling from subscribe method, when data is updated.\n   * \n   * @param newData\n   */\n  updated(newData) {\n    this.data = newData;\n  }\n  \n  /**\n   * Method for calling from subscribe method, when data is removed.\n   */\n  removed() {}\n  \n  /**\n   * Mount already subscribed data, with some custom logic.\n   * @param {Carriage~mountCallback} [callback]\n   */\n  mount(callback) {\n    this.stage = 'mounted';\n    if (typeof(callback) == 'function') {\n      callback();\n    }\n  }\n  \n  /**\n   * @callback Carriage~mountCallback\n   * @param error\n   */\n  \n  /**\n   * Unmount and unregister from carriages in funicular.\n   * @param {Carriage~unmountCallback} [callback]\n   */\n  unmount(callback) {\n    this.stage = 'unmounted';\n    delete this.funicular.carriages[this.name][this.id];\n    this.unsubscribe();\n    if (typeof(callback) == 'function') {\n      callback();\n    }\n  }\n  \n  /**\n   * @callback Carriage~unmountCallback\n   * @param error\n   */\n}\n\nclass Funicular {\n  constructor() {\n    var funicular = this;\n    \n    this.Carriage = class extends Carriage {\n      constructor() {\n        super(...arguments);\n        this.funicular = funicular;\n        this.id = ++this.funicular.lastId;\n        \n        funicular.carriages[this.name] = funicular.carriages[this.name] || {};\n        funicular.carriages[this.name][this.id] = this;\n      }\n    };\n    \n    this.lastId = 0;\n    // { name: { id: Carriage, id: Carriage }, name: { id: Carriage, id: Carriage }, name: { id: Carriage, id: Carriage } }\n    this.carriages = {};\n  }\n  \n  /**\n   * Method for mount new carriage in this funicular.\n   * \n   * @param {String} name\n   * @param {Funicular~mountCallback} [callback]\n   */\n  mount(name, callback) {\n    var carriage = new this.Carriage(name);\n    var callback = callback || ((error) => { throw error; });\n    carriage.subscribe((error) => {\n      if (error) callback(error);\n      else carriage.mount((error) => {\n        if (error) callback(error);\n        else callback(undefined, carriage);\n      });\n    });\n  }\n  \n  /**\n   * @callback Funicular~mountCallback\n   * @param error\n   * @param {Carriage} carriage\n   */\n};\n\nexport {\n  Funicular,\n  Carriage,\n}"]}