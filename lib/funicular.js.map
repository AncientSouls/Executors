{"version":3,"sources":["../src/lib/funicular.js"],"names":["Funicular","lastCarriageId","namedCarriages","unnamedCarriages","Carriage","name","data","mountedCallback","remountedCallback","unmountedCallback","force","carriage","mountedCallbacks","push","error","remountedCallbacks","unmountedCallbacks","mount"],"mappings":"ikBAAA,oC,mRAEA;;;MAIMA,U,YAEJ,oBAAc,iCAEZ;;;;OAKA,KAAKC,cAAL,CAAsB,CAAtB,CAEA;;;;;;;OAQA,KAAKC,cAAL,CAAsB,EAAtB,CAEA;;;;;;OAOA,KAAKC,gBAAL,CAAwB,EAAxB,CAEA;;;;OAKC,KAAKC,QAAL,mBAEF,CAED;;;;;;;;+DASMC,I,CAAMC,I,CAAMC,e,CAAiBC,iB,CAAmBC,iB,CAAkC,IAAfC,MAAe,2DAAP,KAAO,CACtF,GAAI,CAACA,KAAD,EAAU,KAAKR,cAAL,CAAoBG,IAApB,CAAV,EAAuC,KAAKH,cAAL,CAAoBG,IAApB,EAA0B,CAA1B,CAA3C,CAAyE,CACvE,GAAIM,UAAW,KAAKT,cAAL,CAAoBG,IAApB,EAA0B,CAA1B,CAAf,CACA,GAAIE,eAAJ,CAAqB,CACnBI,SAASC,gBAAT,CAA0BC,IAA1B,CAA+BN,eAA/B,EACAA,gBAAgBI,SAASG,KAAzB,CAAgCH,QAAhC,CACD,CACD,GAAIH,iBAAJ,CAAuBG,SAASI,kBAAT,CAA4BF,IAA5B,CAAiCL,iBAAjC,EACvB,GAAIC,iBAAJ,CAAuBE,SAASK,kBAAT,CAA4BH,IAA5B,CAAiCJ,iBAAjC,CACxB,CARD,IAQO,CACL,GAAIE,UAAW,GAAI,MAAKP,QAAT,CAAkB,IAAlB,CAAwBC,IAAxB,CAA8BC,IAA9B,CAAf,CACA,GAAIC,eAAJ,CAAqBI,SAASC,gBAAT,CAA0BC,IAA1B,CAA+BN,eAA/B,EACrB,GAAIC,iBAAJ,CAAuBG,SAASI,kBAAT,CAA4BF,IAA5B,CAAiCL,iBAAjC,EACvB,GAAIC,iBAAJ,CAAuBE,SAASK,kBAAT,CAA4BH,IAA5B,CAAiCJ,iBAAjC,EACvBE,SAASM,KAAT,EACD,CACF,C,wCAIYjB,S","file":"funicular.js","sourcesContent":["import Carriage from './carriage';\n\n/**\n * Basic controller of one namespace of carriages.\n * @memberof ancient-funicular\n */\nclass Funicular {\n  \n  constructor() {\n    \n    /**\n     * @type {Number}\n     * @memberof Funicular\n     * @private\n     */\n    this.lastCarriageId = 1;\n    \n    /**\n     * Must contain only fully assembled, ready-to-operate carriages with name.\n     * Broken or dismantled carriages should not remain here.\n     * Attention! A crutch was used. If the carriage is marked as unique, it additionally places itself in id 0. When unmounting or breaking it will also be removed from here.\n     * @type {CarriageListsByNames}\n     * @memberof Funicular\n     * @private\n     */\n    this.namedCarriages = {};\n    \n    /**\n     * Must contain only fully assembled, ready-to-operate carriages without name.\n     * Broken or dismantled carriages should not remain here.\n     * @type {CarriagesByIds}\n     * @memberof Funicular\n     * @private\n     */\n    this.unnamedCarriages = {};\n    \n    /**\n     * @type {Function}\n     * @memberof Funicular\n     * @private\n     */\n     this.Carriage = Carriage;\n    \n  }\n  \n  /**\n   * Based on name and data, mount new carriage of found already mounted unique carriage in {@link Funicular.namedCarriages} and register callbacks.\n   * @param {String} name\n   * @param data\n   * @param {Carriage~mountCallback} [mountedCallback]\n   * @param {Carriage~remountCallback} [remountedCallback]\n   * @param {Carriage~unmountCallback} [unmountedCallback]\n   * @param {Boolean} [force] - Mount despite the existence of an existing unique carriage.\n   */\n  mount(name, data, mountedCallback, remountedCallback, unmountedCallback, force = false) {\n    if (!force && this.namedCarriages[name] && this.namedCarriages[name][0]) {\n      var carriage = this.namedCarriages[name][0];\n      if (mountedCallback) {\n        carriage.mountedCallbacks.push(mountedCallback);\n        mountedCallback(carriage.error, carriage);\n      }\n      if (remountedCallback) carriage.remountedCallbacks.push(remountedCallback);\n      if (unmountedCallback) carriage.unmountedCallbacks.push(unmountedCallback);\n    } else {\n      var carriage = new this.Carriage(this, name, data);\n      if (mountedCallback) carriage.mountedCallbacks.push(mountedCallback);\n      if (remountedCallback) carriage.remountedCallbacks.push(remountedCallback);\n      if (unmountedCallback) carriage.unmountedCallbacks.push(unmountedCallback);\n      carriage.mount();\n    }\n  }\n  \n}\n\nexport default Funicular;"]}